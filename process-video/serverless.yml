org: ipj31
app: video-ai
service: video-processing

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  region: us-east-1
  runtime: python3.11
  environment:
    STAGE: ${opt:stage, self:provider.stage}
  s3:
    videos:
      name: ${self:app}-videos-${opt:stage, self:provider.stage}
      corsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            ExposedHeaders:
              - "x-amz-server-side-encryption"
              - "x-amz-request-id"
              - "x-amz-id-2"
              - "ETag"
              - "x-amz-meta-foo"
            MaxAge: 3000
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
            - "dynamodb:*"
            - "iam:PassRole"
            - "states:StartExecution"
            - "states:SendTaskSuccess"
            - "states:SendTaskFailure"
            - "rekognition:StartLabelDetection"
            - "rekognition:GetLabelDetection"
            - "transcribe:StartTranscriptionJob"
            - "transcribe:GetTranscriptionJob"
          Resource: "*"

plugins:
  - serverless-step-functions
  - serverless-python-requirements
  - serverless-dotenv-plugin

custom:
  pythonRequirements:
    layer: true
    dockerizePip: true
    dockerImage: python:3.11

layers:
  ffprobe:
    path: ffprobe-layer
    compatibleRuntimes:
      - python3.11

package:
  individually: true
  patterns:
    - "!venv/**"
    - "!requirements.txt"
    - "!ffprobe-layer/**"
    - "!on_new_video.py"
    - "!fetch_data.py"
    - "!embed_video_data.py"
    - "!validate_pinecone_index.py"
    - "!delete_video.py"

functions:
  # Processes video when uploaded to S3
  process-video:
    name: ${self:service}-${opt:stage, self:provider.stage}
    handler: on_new_video.on_new_video
    package:
      include:
        - on_new_video.py
    events:
      - s3:
          bucket: videos
          event: s3:ObjectCreated:*
    layers:
      - !Ref FfprobeLambdaLayer
    environment:
      PROCESS_VIDEO_STATE_MACHINE_ARN:
        Ref: ProcessDashvideoDash${opt:stage, self:provider.stage}

  # Starts the jobs depending on job type
  fetch-data:
    name: ${self:service}-${opt:stage, self:provider.stage}-fetch-rek
    handler: fetch_data.handler
    package:
      include:
        - fetch_data.py
    environment:
      REKOGNITION_TOPIC_ARN: ${param:rekSNSTopic}
      REKOGNITION_ROLE_ARN: ${param:rekRole}
      VIDEO_BUCKET: ${self:provider.s3.videos.name}

  # Creates embeddings from the video data and puts them into the Pinecone database
  embed-video-data:
    name: ${self:service}-${opt:stage, self:provider.stage}-embed-video-data
    handler: embed_video_data.handler
    timeout: 900
    package:
      include:
        - embed_video_data.py
    layers:
      - !Ref PythonRequirementsLambdaLayer

  # Delete a video
  delete-video:
    name: ${self:service}-${opt:stage, self:provider.stage}-delete-video
    handler: delete_video.handler
    package:
      include:
        - delete_video.py
    environment:
      VIDEO_BUCKET: ${self:provider.s3.videos.name}
    events:
      - httpApi:
          path: /video/{videoId}
          method: delete
          authorizer:
            type: aws_iam
    layers:
      - !Ref PythonRequirementsLambdaLayer

stepFunctions:
  stateMachines:
    procesVideo:
      name: process-video-${opt:stage, self:provider.stage}

      definition:
        StartAt: FetchConfig
        States:
          # The jobs that will be fetched and processed, static for now
          # Will let user choose in the future
          FetchConfig:
            Type: Pass
            Parameters:
              - jobType:
                  type: rek
                  rekType: label
                videoKey.$: $.videoKey
                videoId.$: $.videoId
              - jobType:
                  type: transcribe
                videoUri.$: $.videoUri
                videoId.$: $.videoId
            Next: GetDataMap

          GetDataMap:
            Type: Map
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE

              StartAt: FetchData
              States:
                FetchData:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                  Parameters:
                    FunctionName:
                      Fn::GetAtt:
                        - fetch-data
                        - Arn
                    Payload:
                      job.$: $
                      taskToken.$: $$.Task.Token
                  Next: EmbedVideoData

                EmbedVideoData:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                  Parameters:
                    FunctionName:
                      Fn::GetAtt:
                        - embed-video-data
                        - Arn
                    Payload:
                      job.$: $
                      taskToken.$: $$.Task.Token
                      videoId.$: $$.Execution.Input.videoId
                  End: true

            End: true

resources:
  Outputs:
    videosS3Name:
      Value:
        Ref: S3BucketVideos
