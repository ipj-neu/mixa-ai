org: ipj31
app: video-ai
service: video-processing

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  region: us-east-1
  runtime: python3.11
  environment:
    STAGE: ${opt:stage, self:provider.stage}
  s3:
    videos:
      name: ${self:app}-videos-${opt:stage, self:provider.stage}
      corsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            ExposedHeaders:
              - "x-amz-server-side-encryption"
              - "x-amz-request-id"
              - "x-amz-id-2"
              - "ETag"
              - "x-amz-meta-foo"
            MaxAge: 3000
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "rekognition:StartLabelDetection"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource: "*"

plugins:
  - serverless-step-functions
  - serverless-python-requirements
  - serverless-dotenv-plugin

custom:
  pythonRequirements:
    layer: true
    dockerizePip: true

layers:
  ffprobe:
    path: ffprobe-layer
    compatibleRuntimes:
      - python3.11

package:
  individually: true
  patterns:
    - "!venv/**"
    - "!requirements.txt"
    - "!ffprobe-layer/**"
    - "!on_new_video.py"
    - "!fetch_rek.py"
    - "!embed_video_data.py"
    - "!validate_pinecone_index.py"

functions:
  # Processes video when uploaded to S3
  process-video:
    name: ${self:service}-${opt:stage, self:provider.stage}
    handler: on_new_video.on_new_video
    package:
      include:
        - on_new_video.py
    events:
      - s3:
          bucket: videos
          event: s3:ObjectCreated:*
    layers:
      - !Ref FfprobeLambdaLayer
    environment:
      PROCESS_VIDEO_STATE_MACHINE_ARN:
        Ref: ProcessDashvideoDash${opt:stage, self:provider.stage}

  # TODO figure out when this should happen
  #   should happen outside the map state
  validate-pinecone-index:
    name: ${self:service}-${opt:stage, self:provider.stage}-validate-pinecone-index
    handler: validate_pinecone_index.handler
    package:
      include:
        - validate_pinecone_index.py
    layers:
      - !Ref PythonRequirementsLambdaLayer

  # Starts the Rekognition jobs and set the output to an SNS topic
  fetch-rek:
    name: ${self:service}-${opt:stage, self:provider.stage}-fetch-rek
    handler: fetch_rek.handler
    package:
      include:
        - fetch_rek.py
    environment:
      REKOGNITION_TOPIC_ARN: ${param:rekSNSTopic}
      REKOGNITION_ROLE_ARN: ${param:rekRole}
      VIDEO_BUCKET: ${self:provider.s3.videos.name}

  # Creates embeddings from the video data and puts them into the Pinecone database
  embed-video-data:
    name: ${self:service}-${opt:stage, self:provider.stage}-embed-video-data
    handler: embed_video_data.handler
    timeout: 900
    package:
      include:
        - embed_video_data.py
    layers:
      - !Ref PythonRequirementsLambdaLayer

stepFunctions:
  stateMachines:
    procesVideo:
      name: process-video-${opt:stage, self:provider.stage}
      role:
        Fn::GetAtt:
          - StateMachineRole
          - Arn

      definition:
        StartAt: ValidatePineconeIndex
        States:
          ValidatePineconeIndex:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName:
                Fn::GetAtt:
                  - validate-pinecone-index
                  - Arn
              Payload.$: $
            OutputPath: $.Payload
            Next: TmpData

          TmpData:
            Type: Pass
            Result:
              - jobType:
                  type: rek
                  rekType: label
                videoKey.$: $$.Execution.Input.videoKey
              - jobType:
                  type: transcribe
                videoUri.$: $$.Execution.Input.videoUri
            Next: GetDataMap

          GetDataMap:
            Type: Map
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE

              StartAt: JobType
              States:
                JobType:
                  Type: Choice
                  Choices:
                    - Variable: $.jobType.type
                      StringMatches: transcribe
                      Next: FetchTranscribe
                    - Variable: $.jobType.type
                      StringMatches: rek
                      Next: FetchRek

                FetchTranscribe:
                  Type: Task
                  Resource: arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob.waitForTaskToken
                  Parameters:
                    TranscriptionJobName.$: $$.Execution.Input.videoId
                    LanguageCode: en-US
                    Media:
                      MediaFileUri.$: $.videoUri
                    Tags:
                      - Key: taskToken
                        Value.$: $$.Task.Token
                  Next: EmbedVideoData

                FetchRek:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                  Parameters:
                    FunctionName:
                      Fn::GetAtt:
                        - fetch-rek
                        - Arn
                    Payload:
                      job.$: $
                      taskToken.$: $$.Task.Token
                  Next: IsShot

                IsShot:
                  Type: Choice
                  Choices:
                    - Variable: $.rekType
                      StringMatches: shot
                      Next: NoEmbedVideoData
                  Default: EmbedVideoData

                NoEmbedVideoData:
                  Type: Pass
                  End: true

                EmbedVideoData:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                  Parameters:
                    FunctionName:
                      Fn::GetAtt:
                        - embed-video-data
                        - Arn
                    # TODO payload tbd
                    Payload:
                      job.$: $
                      taskToken.$: $$.Task.Token
                  End: true

            End: true

resources:
  Resources:
    StateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: process-video-${opt:stage, self:provider.stage}-state-machine-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: process-video-${opt:stage, self:provider.stage}-state-machine-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - dynamodb:UpdateItem
                    - transciption:StartTranscriptionJob
                    - s3:GetObject
                  Resource: "*"

  Outputs:
    videosS3Name:
      Value:
        Ref: S3BucketVideos
