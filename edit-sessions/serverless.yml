org: ipj31
app: video-ai
service: edit-sessions
provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  environment:
    STAGE: ${opt:stage, self:provider.stage}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - mediaconvert:*
            - iam:PassRole
          Resource: "*"

plugins:
  - serverless-offline

package:
  individually: true

functions:
  get-user-sessions:
    name: get-user-sessions-${opt:stage, self:provider.stage}
    handler: handle_get_user_sessions.handler
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/sessions
          method: GET
          authorizer:
            type: aws_iam

  create-chat-session:
    name: create-edit-sessions-${opt:stage, self:provider.stage}
    handler: handle_post.handler
    package:
      include:
        - handle_post.py
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session
          method: POST
          authorizer:
            type: aws_iam

  delete-edit-session:
    name: delete-edit-session-${opt:stage, self:provider.stage}
    handler: handle_delete.handler
    package:
      include:
        - handle_delete.py
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session/{sessionId}
          method: DELETE
          authorizer:
            type: aws_iam

  get-conversation:
    name: get-edit-session-${opt:stage, self:provider.stage}
    handler: handle_get.handler
    package:
      include:
        - handle_get.py
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session/{sessionId}
          method: GET
          authorizer:
            type: aws_iam

  add-video:
    name: add-video-${opt:stage, self:provider.stage}
    handler: handle_add_video.handler
    package:
      include:
        - handle_add_video.py
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session/{sessionId}/video
          method: POST
          authorizer:
            type: aws_iam

  convert-edit:
    name: convert-edit-${opt:stage, self:provider.stage}
    handler: handle_convert.handler
    package:
      include:
        - handle_convert.py
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session/{sessionId}/convert
          method: POST
          authorizer:
            type: aws_iam

  save-edit:
    name: save-edit-${opt:stage, self:provider.stage}
    handler: handle_save.handler
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session/{sessionId}/save
          method: POST
          authorizer:
            type: aws_iam

  update-name:
    name: update-name
    handler: handle_update_name.handler
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/session/{sessionId}/name
          method: POST
          authorizer:
            type: aws_iam

  ping:
    name: ping-${opt:stage, self:provider.stage}
    handler: testing.testing
    events:
      - httpApi:
          path: /${opt:stage, self:provider.stage}/ping
          method: POST
          authorizer:
            type: aws_iam

custom:
  serverless-offline:
    ignoreJWTSignature: true
