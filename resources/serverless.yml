org: ipj31
app: video-ai
service: resources

frameworkVersion: "3"

provider:
  name: aws
  region: us-east-1

# All resources declared here and shared with other services
resources:
  Resources:
    # Table chat sessions includes mesages and videos in a chat session
    ChatSessions:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:app}-${opt:stage, self:provider.stage}-chat-sessions
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Table connections includes all connections for a user
    Connections:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:app}-${opt:stage, self:provider.stage}-connections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # table for step function statuses and streaming to lambda
    MessageProcessingStatuses:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:app}-${opt:stage, self:provider.stage}-message-processing-statuses
        AttributeDefinitions:
          - AttributeName: executionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: executionId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # TODO Possibly rename with stage
    RekSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: RekSNSTopic

    RekSQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: RekSQSQueue

    RekSNSTopicSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Protocol: "sqs"
        TopicArn:
          Ref: RekSNSTopic
        Endpoint:
          Fn::GetAtt:
            - RekSQSQueue
            - Arn

    RekSNSTopicPolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt:
                  - RekSQSQueue
                  - Arn
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Ref: RekSNSTopic
        Queues: [!Ref RekSQSQueue]

    RekSNSPublishRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "rekognition.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "PublishToSNSTopic"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource:
                    - !Ref RekSNSTopic

  Outputs:
    rekRole:
      Value:
        Fn::GetAtt:
          - RekSNSPublishRole
          - Arn

    rekSNSTopic:
      Value:
        Ref: RekSNSTopic

    rekSQSQueue:
      Value:
        Fn::GetAtt:
          - RekSQSQueue
          - Arn

    statusesTableStreamArn:
      Value:
        Fn::GetAtt:
          - MessageProcessingStatuses
          - StreamArn
