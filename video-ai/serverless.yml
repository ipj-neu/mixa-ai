org: ipj31
app: video-ai
service: video-ai

frameworkVersion: "3"

useDotenv: true

# TODO this will be where to step function is deployed

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  environment:
    STAGE: ${opt:stage, self:provider.stage}
  httpApi:
    authorizers:
      cognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${opt:region, self:provider.region}.amazonaws.com/${param:cognitoUserPoolId}
        audience:
          - ${param:cognitoUserPoolClientId}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"

package:
  individually: true
  patterns:
    - "!venv/**"
    - "!**/__pychache__/**"

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-step-functions

functions:
  video-ai:
    name: video-ai-${opt:stage, self:provider.stage}
    handler: handler.step_function_testing
    module: src/testing

stepFunctions:
  stateMachines:
    videoAIProcess:
      name: video-state-machine-${opt:stage, self:provider.stage}
      definition:
        StartAt: VideoAI
        States:
          VideoAI:
            Type: Task
            Resource:
              Fn::GetAtt:
                - video-ai
                - Arn
            Next: HasJobs

          HasJobs:
            Type: Choice
            Choices:
              - Variable: "$.jobs"
                IsPresent: true
                Next: StartJobs
            Default: NoJobs

          NoJobs:
            Type: Pass
            End: true

          StartJobs:
            Type: Map
            ItemsPath: "$.jobs"
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE

              StartAt: WhichJob
              States:
                WhichJob:
                  Type: Choice
                  Choices:
                    - Variable: "$.type"
                      StringEquals: "label"
                      Next: StartLabelDetection
                    - Variable: "$.type"
                      StringEquals: "face"
                      Next: StartFaceDetection

                StartLabelDetection:
                  Type: Pass
                  Result:
                    labelDetectionJobId: "jobId"
                  End: true

                StartFaceDetection:
                  Type: Pass
                  Result:
                    faceDetectionJobId: "jobId"
                  End: true

            End: true

resources:
  Outputs:
    videoAIStateMachineArn:
      Value:
        Ref: VideoDashstateDashmachineDash${opt:stage, self:provider.stage}

custom:
  pythonRequirements:
    zip: true
    slim: true
    dockerizePip: true
    noDeploy:
      - boto3
      - botocore
    # pipCmdExtraArgs:
    #   - --platform manylinux2014_x86_64

  serverless-offline:
    ignoreJWTSignature: true
