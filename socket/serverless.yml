org: ipj31
app: video-ai
service: socket

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  environment:
    STAGE: ${opt:stage, self:provider.stage}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"

package:
  individually: true
  exclude:
    - venv/**
    - __pycache__/**
    - requirements.txt
    - authorizer.py
    - notify-user.py

plugins:
  - serverless-offline
  - serverless-python-requirements

functions:
  on-connect-socket:
    name: on-connect-socket-${opt:stage, self:provider.stage}
    handler: handler.on_connect
    events:
      - websocket:
          route: $connect
          authorizer:
            name: socket-authorizer

  on-disconnect-socket:
    name: on-disconnect-socket-${opt:stage, self:provider.stage}
    handler: handler.on_disconnect
    events:
      - websocket:
          route: $disconnect

  socket-authorizer:
    name: socket-authorizer-${opt:stage, self:provider.stage}
    handler: authorizer.lambda_handler
    package:
      include:
        - authorizer.py
      exclude:
        - handler.py
    layers:
      - !Ref PythonRequirementsLambdaLayer
    environment:
      COGNITO_USER_POOL_ID: ${param:cognitoUserPoolId}
      REGION: ${self:provider.region}

  notify-user:
    name: notify-user-${opt:stage, self:provider.stage}
    handler: notify-user.handler
    package:
      exclude:
        - handler.py
      include:
        - notify-user.py
    environment:
      DOMAIN: !Ref WebsocketsApi
      REGION: ${self:provider.region}
    events:
      - stream:
          arn: ${param:statusesTableStreamArn}
          filterPatterns:
            - eventName: [MODIFY]

custom:
  pythonRequirements:
    layer: true
