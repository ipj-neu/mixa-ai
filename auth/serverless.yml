org: ipj31
app: video-ai
service: auth

frameworkVersion: "3"

provider:
  name: aws
  region: us-east-1

# Contains all resources for auth
resources:
  Resources:

    # User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    # User pool client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        # REMOVE LATER FOR TESTING
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_CUSTOM_AUTH
          
    # Identity pool
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - CognitoUserPool
                - ProviderName

    # TODO replace s3 arn with output from resources
    # IAM role for authenticated users
    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: 
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        Policies:
          - PolicyName: "CognitoS3AccessPolicy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${param:videosS3Name}/public/*
                    # this is the ugliest fix but it works stops serverless from thinking it should resolve the variable
                    - Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "${param:videosS3Name}/protected/$"
                          - "{cognito-identity.amazonaws.com:sub"
                          - "}/*"
                    - Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "${param:videosS3Name}/private/$"
                          - "{cognito-identity.amazonaws.com:sub"
                          - "}/*"
                  Effect: Allow
                - Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${param:videosS3Name}/uploads/*
                  Effect: Allow
                - Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${param:videosS3Name}/protected/*
                  Effect: Allow
                - Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - public/*
                        - protected/
                        - protected/*
                        - private/
                        - Fn::Join:
                            - ""
                            - - "private/$"
                              - "{cognito-identity.amazonaws.com:sub"
                              - "}/"
                        - Fn::Join:
                            - ""
                            - - "private/$"
                              - "{cognito-identity.amazonaws.com:sub"
                              - "}/*"
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${param:videosS3Name}
                  Effect: Allow
                  
    # IAM role for unauthenticated users
    UnauthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: 
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: unauthenticated
        Policies:
          - PolicyName: "S3Access"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:app}-${opt:stage, self:provider.stage}-videos/public/*
                  Effect: Allow
                - Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${self:app}-${opt:stage, self:provider.stage}-videos/uploads/*
                  Effect: Allow
                - Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:app}-${opt:stage, self:provider.stage}-videos/protected/*
                  Effect: Allow
                - Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - public/*
                        - protected/
                        - protected/*
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${self:app}-${opt:stage, self:provider.stage}-videos
                  Effect: Allow

    # Identity role attachment for users
    IdentityRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - AuthenticatedRole
              - Arn
          unauthenticated:
            Fn::GetAtt:
              - UnauthenticatedRole
              - Arn

  Outputs:
    cognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
    cognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    identityPoolId:
      Value:
        Ref: IdentityPool