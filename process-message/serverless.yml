org: ipj31
app: video-ai
service: process-message

frameworkVersion: "3"

provider:
  name: aws
  region: us-east-1

plugins:
  - serverless-step-functions

stepFunctions:
  stateMachines:
    videoAIProcess:
      name: video-state-machine-${opt:stage, self:provider.stage}
      # role:
      #   Fn::GetAtt:
      #     - StateMachineRole
      #     - Arn

      definition:
        StartAt: VideoAI
        States:
          VideoAI:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              FunctionName: ${param:videoAILambdaArn}
              Payload.$: $
            OutputPath: $.Payload
            Next: HasJobs

          HasJobs:
            Type: Choice
            Choices:
              - Variable: "$.jobs"
                IsPresent: true
                Next: UpdateStatusJobs
            Default: NoJobs

          NoJobs:
            Type: Pass
            End: true

          # TODO maybe add what jobs are being processed
          UpdateStatusJobs:
            Type: Task
            Resource: arn:aws:states:::dynamodb:updateItem
            Parameters:
              TableName: video-ai-${opt:stage, self:provider.stage}-message-processing-statuses
              Key:
                sessionId:
                  S.$: $$.Execution.Input.sessionId
                userId:
                  S.$: $$.Execution.Input.userId
              UpdateExpression: "SET #st = :status"
              ExpressionAttributeNames:
                "#st": "status"
              ExpressionAttributeValues:
                ":status":
                  S: "processing_jobs"
            ResultPath: null
            Next: StartJobs

          StartJobs:
            Type: Map
            ItemsPath: $.jobs
            ItemProcessor:
              ProcessorConfig:
                Mode: INLINE
              StartAt: FetchJob

              States:
                FetchJob:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                  Parameters:
                    FunctionName: ${param:startJobLambdaArn}
                    Payload:
                      job.$: $
                      taskToken.$: $$.Task.Token
                  End: true

            End: true

resources:
  # Resources:
  #   StateMachineRole:
  #     Type: AWS::IAM::Role
  #     Properties:
  #       RoleName: video-ai-${opt:stage, self:provider.stage}-state-machine-role
  #       AssumeRolePolicyDocument:
  #         Version: "2012-10-17"
  #         Statement:
  #           - Effect: Allow
  #             Principal:
  #               Service:
  #                 - states.amazonaws.com
  #             Action:
  #               - sts:AssumeRole
  #       Policies:
  #         - PolicyName: video-ai-${opt:stage, self:provider.stage}-state-machine-policy
  #           PolicyDocument:
  #             Version: "2012-10-17"
  #             Statement:
  #               - Effect: Allow
  #                 Action:
  #                   - lambda:InvokeFunction
  #                   - dynamodb:UpdateItem
  #                 Resource: "*"

  Outputs:
    videoAIStateMachineArn:
      Value:
        Ref: VideoDashstateDashmachineDash${opt:stage, self:provider.stage}
